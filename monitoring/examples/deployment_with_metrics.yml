# Example: Enhanced deployment.yml with Grafana metrics export
# Replace your existing deployment.yml with this version to enable metrics

name: Build and Push Images

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: savenbiteregistry-c0bnbkfndeayfbae.azurecr.io
  BACKEND_IMAGE: savenbite-backend
  FRONTEND_IMAGE: savenbite-frontend
  REACT_APP_API_URL: https://savenbiteservice-hzghg8gcgddtcfg7.southafricanorth-01.azurewebsites.net

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Record workflow start time
    - name: Record workflow start time
      id: workflow_start
      run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT
      
    - name: Log environment variables
      run: |
        echo "Building with API URL: ${{ env.REACT_APP_API_URL }}"
        echo "Registry: ${{ env.REGISTRY }}"
        
    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    # Backend build
    - name: Build and push backend image
      id: backend_build
      continue-on-error: true
      run: |
        start=$(date +%s)
        
        docker build \
          -t ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }} \
          -t ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest \
          -f ./save-n-bite-backend/Dockerfile.prod \
          ./save-n-bite-backend
        
        exit_code=$?
        
        if [ $exit_code -eq 0 ]; then
          docker push ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
          push_exit=$?
          
          end=$(date +%s)
          duration=$((end - start))
          
          # Get image size
          size_bytes=$(docker image inspect ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest --format='{{.Size}}')
          size_mb=$(echo "scale=2; $size_bytes / 1024 / 1024" | bc)
          
          echo "status=success" >> $GITHUB_OUTPUT
          echo "duration=$duration" >> $GITHUB_OUTPUT
          echo "size_mb=$size_mb" >> $GITHUB_OUTPUT
          
          exit $push_exit
        else
          end=$(date +%s)
          duration=$((end - start))
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "duration=$duration" >> $GITHUB_OUTPUT
          echo "size_mb=0" >> $GITHUB_OUTPUT
          exit $exit_code
        fi
    
    # Frontend build
    - name: Build and push frontend image
      id: frontend_build
      continue-on-error: true
      run: |
        start=$(date +%s)
        
        docker build \
          -t ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }} \
          -t ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest \
          --build-arg REACT_APP_API_URL=${{ env.REACT_APP_API_URL }} \
          -f ./save-n-bite-frontend/Dockerfile.prod \
          ./save-n-bite-frontend
        
        exit_code=$?
        
        if [ $exit_code -eq 0 ]; then
          docker push ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
          push_exit=$?
          
          end=$(date +%s)
          duration=$((end - start))
          
          # Get image size
          size_bytes=$(docker image inspect ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest --format='{{.Size}}')
          size_mb=$(echo "scale=2; $size_bytes / 1024 / 1024" | bc)
          
          echo "status=success" >> $GITHUB_OUTPUT
          echo "duration=$duration" >> $GITHUB_OUTPUT
          echo "size_mb=$size_mb" >> $GITHUB_OUTPUT
          
          exit $push_exit
        else
          end=$(date +%s)
          duration=$((end - start))
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "duration=$duration" >> $GITHUB_OUTPUT
          echo "size_mb=0" >> $GITHUB_OUTPUT
          exit $exit_code
        fi
        
    - name: Verify images were pushed
      if: steps.backend_build.outputs.status == 'success' && steps.frontend_build.outputs.status == 'success'
      run: |
        echo "âœ… Backend image: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest"
        echo "âœ… Frontend image: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest"
        echo "ðŸ”§ Frontend built with API URL: ${{ env.REACT_APP_API_URL }}"
    
    # Calculate workflow metrics
    - name: Calculate workflow metrics
      if: always()
      id: workflow_metrics
      run: |
        end_time=$(date +%s)
        start_time=${{ steps.workflow_start.outputs.start_time }}
        duration=$((end_time - start_time))
        echo "duration=$duration" >> $GITHUB_OUTPUT
        
        # Determine overall status
        if [[ "${{ steps.backend_build.outputs.status }}" == "success" && \
              "${{ steps.frontend_build.outputs.status }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi
    
    # Export metrics to Pushgateway (if configured)
    - name: Export deployment metrics
      if: always() && vars.PUSHGATEWAY_URL != ''
      continue-on-error: true
      env:
        PUSHGATEWAY_URL: ${{ vars.PUSHGATEWAY_URL }}
      run: |
        # Install dependencies
        pip3 install requests > /dev/null 2>&1 || true
        
        cd $GITHUB_WORKSPACE/monitoring/scripts
        
        # Export workflow metrics
        python3 export_metrics.py workflow \
          "${{ steps.workflow_metrics.outputs.status }}" \
          "${{ steps.workflow_metrics.outputs.duration }}" || true
        
        # Export backend build metrics
        python3 export_metrics.py build \
          "backend" \
          "${{ steps.backend_build.outputs.status }}" \
          "${{ steps.backend_build.outputs.duration }}" || true
        
        # Export frontend build metrics
        python3 export_metrics.py build \
          "frontend" \
          "${{ steps.frontend_build.outputs.status }}" \
          "${{ steps.frontend_build.outputs.duration }}" || true
        
        # Export Docker image metrics
        if [ -n "${{ steps.backend_build.outputs.size_mb }}" ]; then
          python3 export_metrics.py docker \
            "backend" \
            "${{ steps.backend_build.outputs.size_mb }}" \
            "${{ steps.backend_build.outputs.duration }}" \
            --tag "${{ github.sha }}" || true
        fi
        
        if [ -n "${{ steps.frontend_build.outputs.size_mb }}" ]; then
          python3 export_metrics.py docker \
            "frontend" \
            "${{ steps.frontend_build.outputs.size_mb }}" \
            "${{ steps.frontend_build.outputs.duration }}" \
            --tag "${{ github.sha }}" || true
        fi
        
        # Export deployment status (assuming success if images pushed)
        python3 export_metrics.py deployment \
          "production" \
          "${{ steps.workflow_metrics.outputs.status }}" \
          "${{ steps.workflow_metrics.outputs.duration }}" || true
    
    # Fail the job if any build failed
    - name: Check build results
      if: steps.backend_build.outputs.status == 'failure' || steps.frontend_build.outputs.status == 'failure'
      run: exit 1
